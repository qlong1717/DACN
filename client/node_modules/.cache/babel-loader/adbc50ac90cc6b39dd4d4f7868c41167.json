{"ast":null,"code":"var _jsxFileName = \"D:\\\\DACN\\\\client\\\\src\\\\components\\\\PostShare\\\\PostShare.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport \"./PostShare.css\";\nimport { UilScenery } from \"@iconscout/react-unicons\";\nimport { UilPlayCircle } from \"@iconscout/react-unicons\";\nimport { UilLocationPoint } from \"@iconscout/react-unicons\";\nimport { UilSchedule } from \"@iconscout/react-unicons\";\nimport { UilTimes } from \"@iconscout/react-unicons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { uploadImage, uploadPost } from \"../../actions/UploadAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostShare = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useSelector(state => state.authReducer.authData);\n  const loading = useSelector(state => state.postReducer.uploading);\n  const [image, setImage] = useState(null);\n  const desc = useRef();\n  const serverPublic = process.env.REACT_APP_PUBLIC_FOLDER; // handle Image Change\n\n  const onImageChange = event => {\n    if (event.target.files && event.target.files[0]) {\n      let img = event.target.files[0];\n      setImage(img);\n    }\n  };\n\n  const imageRef = useRef(); // handle post upload\n\n  const handleUpload = async e => {\n    e.preventDefault(); //post data\n\n    const newPost = {\n      userId: user._id,\n      desc: desc.current.value\n    }; // if there is an image with post\n\n    if (image) {\n      const data = new FormData();\n      const fileName = Date.now() + image.name;\n      data.append(\"name\", fileName);\n      data.append(\"file\", image);\n      newPost.image = fileName;\n      console.log(newPost);\n\n      try {\n        dispatch(uploadImage(data));\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    dispatch(uploadPost(newPost));\n    resetShare();\n  }; // Reset Post Share\n\n\n  const resetShare = () => {\n    setImage(null);\n    desc.current.value = \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PostShare\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: user.profilePicture ? serverPublic + user.profilePicture : serverPublic + \"defaultProfile.png\",\n      alt: \"Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"What's happening?\",\n        required: true,\n        ref: desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postOptions\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option\",\n          style: {\n            color: \"var(--photo)\"\n          },\n          onClick: () => imageRef.current.click(),\n          children: [/*#__PURE__*/_jsxDEV(UilScenery, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), \"Photo\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option\",\n          style: {\n            color: \"var(--video)\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(UilPlayCircle, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), \"Video\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option\",\n          style: {\n            color: \"var(--location)\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(UilLocationPoint, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), \"Location\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option\",\n          style: {\n            color: \"var(--shedule)\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(UilSchedule, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), \"Shedule\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button ps-button\",\n          onClick: handleUpload,\n          disabled: loading,\n          children: loading ? \"uploading\" : \"Share\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            ref: imageRef,\n            onChange: onImageChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), image && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"previewImage\",\n        children: [/*#__PURE__*/_jsxDEV(UilTimes, {\n          onClick: () => setImage(null)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: URL.createObjectURL(image),\n          alt: \"preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostShare, \"R/0G1HxBynJOh2bKdMWPGXNxAvM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PostShare;\nexport default PostShare;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostShare\");","map":{"version":3,"sources":["D:/DACN/client/src/components/PostShare/PostShare.jsx"],"names":["React","useState","useRef","UilScenery","UilPlayCircle","UilLocationPoint","UilSchedule","UilTimes","useDispatch","useSelector","uploadImage","uploadPost","PostShare","dispatch","user","state","authReducer","authData","loading","postReducer","uploading","image","setImage","desc","serverPublic","process","env","REACT_APP_PUBLIC_FOLDER","onImageChange","event","target","files","img","imageRef","handleUpload","e","preventDefault","newPost","userId","_id","current","value","data","FormData","fileName","Date","now","name","append","console","log","err","resetShare","profilePicture","color","click","display","URL","createObjectURL"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport \"./PostShare.css\";\r\nimport { UilScenery } from \"@iconscout/react-unicons\";\r\nimport { UilPlayCircle } from \"@iconscout/react-unicons\";\r\nimport { UilLocationPoint } from \"@iconscout/react-unicons\";\r\nimport { UilSchedule } from \"@iconscout/react-unicons\";\r\nimport { UilTimes } from \"@iconscout/react-unicons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { uploadImage, uploadPost } from \"../../actions/UploadAction\";\r\n\r\nconst PostShare = () => {\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((state) => state.authReducer.authData);\r\n  const loading = useSelector((state) => state.postReducer.uploading);\r\n  const [image, setImage] = useState(null);\r\n  const desc = useRef();\r\n  const serverPublic = process.env.REACT_APP_PUBLIC_FOLDER;\r\n\r\n  // handle Image Change\r\n  const onImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      let img = event.target.files[0];\r\n      setImage(img);\r\n    }\r\n  };\r\n\r\n  const imageRef = useRef();\r\n\r\n  // handle post upload\r\n  const handleUpload = async (e) => {\r\n    e.preventDefault();\r\n\r\n    //post data\r\n    const newPost = {\r\n      userId: user._id,\r\n      desc: desc.current.value,\r\n    };\r\n\r\n    // if there is an image with post\r\n    if (image) {\r\n      const data = new FormData();\r\n      const fileName = Date.now() + image.name;\r\n      data.append(\"name\", fileName);\r\n      data.append(\"file\", image);\r\n      newPost.image = fileName;\r\n      console.log(newPost);\r\n      try {\r\n        dispatch(uploadImage(data));\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    dispatch(uploadPost(newPost));\r\n    resetShare();\r\n  };\r\n\r\n  // Reset Post Share\r\n  const resetShare = () => {\r\n    setImage(null);\r\n    desc.current.value = \"\";\r\n  };\r\n  return (\r\n    <div className=\"PostShare\">\r\n      <img\r\n        src={\r\n          user.profilePicture\r\n            ? serverPublic + user.profilePicture\r\n            : serverPublic + \"defaultProfile.png\"\r\n        }\r\n        alt=\"Profile\"\r\n      />\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"What's happening?\"\r\n          required\r\n          ref={desc}\r\n        />\r\n        <div className=\"postOptions\">\r\n          <div\r\n            className=\"option\"\r\n            style={{ color: \"var(--photo)\" }}\r\n            onClick={() => imageRef.current.click()}\r\n          >\r\n            <UilScenery />\r\n            Photo\r\n          </div>\r\n\r\n          <div className=\"option\" style={{ color: \"var(--video)\" }}>\r\n            <UilPlayCircle />\r\n            Video\r\n          </div>\r\n          <div className=\"option\" style={{ color: \"var(--location)\" }}>\r\n            <UilLocationPoint />\r\n            Location\r\n          </div>\r\n          <div className=\"option\" style={{ color: \"var(--shedule)\" }}>\r\n            <UilSchedule />\r\n            Shedule\r\n          </div>\r\n          <button\r\n            className=\"button ps-button\"\r\n            onClick={handleUpload}\r\n            disabled={loading}\r\n          >\r\n            {loading ? \"uploading\" : \"Share\"}\r\n          </button>\r\n\r\n          <div style={{ display: \"none\" }}>\r\n            <input type=\"file\" ref={imageRef} onChange={onImageChange} />\r\n          </div>\r\n        </div>\r\n\r\n        {image && (\r\n          <div className=\"previewImage\">\r\n            <UilTimes onClick={() => setImage(null)} />\r\n            <img src={URL.createObjectURL(image)} alt=\"preview\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostShare;\r\n"]},"metadata":{},"sourceType":"module"}