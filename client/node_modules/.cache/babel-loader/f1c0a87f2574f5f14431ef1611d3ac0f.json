{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN-SocialMedia-ZAINKEEPSCODE\\\\client\\\\src\\\\components\\\\ChatBox\\\\ChatBox.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRef } from \"react\";\nimport { addMessage, getMessages } from \"../../api/MessageRequests\";\nimport { getUser } from \"../../api/UserRequests\";\nimport \"./ChatBox.css\";\nimport { format } from \"timeago.js\";\nimport InputEmoji from 'react-input-emoji';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChatBox = _ref => {\n  _s();\n\n  let {\n    chat,\n    currentUser,\n    setSendMessage,\n    receivedMessage\n  } = _ref;\n  const [userData, setUserData] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const handleChange = newMessage => {\n    setNewMessage(newMessage);\n  }; // fetching data for header\n\n\n  useEffect(() => {\n    var _chat$members;\n\n    const userId = chat === null || chat === void 0 ? void 0 : (_chat$members = chat.members) === null || _chat$members === void 0 ? void 0 : _chat$members.find(id => id !== currentUser);\n\n    const getUserData = async () => {\n      try {\n        const {\n          data\n        } = await getUser(userId);\n        setUserData(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    if (chat !== null) getUserData();\n  }, [chat, currentUser]); // fetch messages\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const {\n          data\n        } = await getMessages(chat._id);\n        setMessages(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    if (chat !== null) fetchMessages();\n  }, [chat]); // Always scroll to last Message\n\n  useEffect(() => {\n    var _scroll$current;\n\n    (_scroll$current = scroll.current) === null || _scroll$current === void 0 ? void 0 : _scroll$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]); // Send Message\n\n  const handleSend = async e => {\n    e.preventDefault();\n    const message = {\n      senderId: currentUser,\n      text: newMessage,\n      chatId: chat._id\n    };\n    const receiverId = chat.members.find(id => id !== currentUser); // send message to socket server\n\n    setSendMessage({ ...message,\n      receiverId\n    }); // send message to database\n\n    try {\n      const {\n        data\n      } = await addMessage(message);\n      setMessages([...messages, data]);\n      setNewMessage(\"\");\n    } catch {\n      console.log(\"error\");\n    }\n  }; // Receive Message from parent component\n\n\n  useEffect(() => {\n    console.log(\"Message Arrived: \", receivedMessage);\n\n    if (receivedMessage !== null && receivedMessage.chatId === chat._id) {\n      setMessages([...messages, receivedMessage]);\n    }\n  }, [receivedMessage]);\n  const scroll = useRef();\n  const imageRef = useRef();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatBox-container\",\n      children: chat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"follower\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: userData !== null && userData !== void 0 && userData.profilePicture ? process.env.REACT_APP_PUBLIC_FOLDER + userData.profilePicture : process.env.REACT_APP_PUBLIC_FOLDER + \"defaultProfile.png\",\n                alt: \"Profile\",\n                className: \"followerImage\",\n                style: {\n                  width: \"50px\",\n                  height: \"50px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"name\",\n                style: {\n                  fontSize: \"0.9rem\"\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [userData === null || userData === void 0 ? void 0 : userData.firstname, \" \", userData === null || userData === void 0 ? void 0 : userData.lastname]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            style: {\n              width: \"95%\",\n              border: \"0.1px solid #ececec\",\n              marginTop: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-body\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: scroll,\n              className: message.senderId === currentUser ? \"message own\" : \"message\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: message.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 21\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: format(message.createdAt)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this)\n          }, void 0, false))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-sender\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => imageRef.current.click(),\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputEmoji, {\n            value: newMessage,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"send-button button\",\n            onClick: handleSend,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            name: \"\",\n            id: \"\",\n            style: {\n              display: \"none\"\n            },\n            ref: imageRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"chatbox-empty-message\",\n        children: \"Tap on a chat to start conversation...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(ChatBox, \"TP0imqgIuVfMlkfD4OBwzjd87IQ=\");\n\n_c = ChatBox;\nexport default ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["D:/MERN-SocialMedia-ZAINKEEPSCODE/client/src/components/ChatBox/ChatBox.jsx"],"names":["React","useEffect","useState","useRef","addMessage","getMessages","getUser","format","InputEmoji","ChatBox","chat","currentUser","setSendMessage","receivedMessage","userData","setUserData","messages","setMessages","newMessage","setNewMessage","handleChange","userId","members","find","id","getUserData","data","error","console","log","fetchMessages","_id","scroll","current","scrollIntoView","behavior","handleSend","e","preventDefault","message","senderId","text","chatId","receiverId","imageRef","profilePicture","process","env","REACT_APP_PUBLIC_FOLDER","width","height","fontSize","firstname","lastname","border","marginTop","map","createdAt","click","display"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { addMessage, getMessages } from \"../../api/MessageRequests\";\r\nimport { getUser } from \"../../api/UserRequests\";\r\nimport \"./ChatBox.css\";\r\nimport { format } from \"timeago.js\";\r\nimport InputEmoji from 'react-input-emoji'\r\n\r\nconst ChatBox = ({ chat, currentUser, setSendMessage,  receivedMessage }) => {\r\n  const [userData, setUserData] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  const handleChange = (newMessage)=> {\r\n    setNewMessage(newMessage)\r\n  }\r\n\r\n  // fetching data for header\r\n  useEffect(() => {\r\n    const userId = chat?.members?.find((id) => id !== currentUser);\r\n    const getUserData = async () => {\r\n      try {\r\n        const { data } = await getUser(userId);\r\n        setUserData(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    if (chat !== null) getUserData();\r\n  }, [chat, currentUser]);\r\n\r\n  // fetch messages\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const { data } = await getMessages(chat._id);\r\n        setMessages(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n\r\n    if (chat !== null) fetchMessages();\r\n  }, [chat]);\r\n\r\n\r\n  // Always scroll to last Message\r\n  useEffect(()=> {\r\n    scroll.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  },[messages])\r\n\r\n\r\n\r\n  // Send Message\r\n  const handleSend = async(e)=> {\r\n    e.preventDefault()\r\n    const message = {\r\n      senderId : currentUser,\r\n      text: newMessage,\r\n      chatId: chat._id,\r\n  }\r\n  const receiverId = chat.members.find((id)=>id!==currentUser);\r\n  // send message to socket server\r\n  setSendMessage({...message, receiverId})\r\n  // send message to database\r\n  try {\r\n    const { data } = await addMessage(message);\r\n    setMessages([...messages, data]);\r\n    setNewMessage(\"\");\r\n  }\r\n  catch\r\n  {\r\n    console.log(\"error\")\r\n  }\r\n}\r\n\r\n// Receive Message from parent component\r\nuseEffect(()=> {\r\n  console.log(\"Message Arrived: \", receivedMessage)\r\n  if (receivedMessage !== null && receivedMessage.chatId === chat._id) {\r\n    setMessages([...messages, receivedMessage]);\r\n  }\r\n\r\n},[receivedMessage])\r\n\r\n\r\n\r\n  const scroll = useRef();\r\n  const imageRef = useRef();\r\n  return (\r\n    <>\r\n      <div className=\"ChatBox-container\">\r\n        {chat ? (\r\n          <>\r\n            {/* chat-header */}\r\n            <div className=\"chat-header\">\r\n              <div className=\"follower\">\r\n                <div>\r\n                  <img\r\n                    src={\r\n                      userData?.profilePicture\r\n                        ? process.env.REACT_APP_PUBLIC_FOLDER +\r\n                          userData.profilePicture\r\n                        : process.env.REACT_APP_PUBLIC_FOLDER +\r\n                          \"defaultProfile.png\"\r\n                    }\r\n                    alt=\"Profile\"\r\n                    className=\"followerImage\"\r\n                    style={{ width: \"50px\", height: \"50px\" }}\r\n                  />\r\n                  <div className=\"name\" style={{ fontSize: \"0.9rem\" }}>\r\n                    <span>\r\n                      {userData?.firstname} {userData?.lastname}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <hr\r\n                style={{\r\n                  width: \"95%\",\r\n                  border: \"0.1px solid #ececec\",\r\n                  marginTop: \"20px\",\r\n                }}\r\n              />\r\n            </div>\r\n            {/* chat-body */}\r\n            <div className=\"chat-body\" >\r\n              {messages.map((message) => (\r\n                <>\r\n                  <div ref={scroll}\r\n                    className={\r\n                      message.senderId === currentUser\r\n                        ? \"message own\"\r\n                        : \"message\"\r\n                    }\r\n                  >\r\n                    <span>{message.text}</span>{\" \"}\r\n                    <span>{format(message.createdAt)}</span>\r\n                  </div>\r\n                </>\r\n              ))}\r\n            </div>\r\n            {/* chat-sender */}\r\n            <div className=\"chat-sender\">\r\n              <div onClick={() => imageRef.current.click()}>+</div>\r\n              <InputEmoji\r\n                value={newMessage}\r\n                onChange={handleChange}\r\n              />\r\n              <div className=\"send-button button\" onClick = {handleSend}>Send</div>\r\n              <input\r\n                type=\"file\"\r\n                name=\"\"\r\n                id=\"\"\r\n                style={{ display: \"none\" }}\r\n                ref={imageRef}\r\n              />\r\n            </div>{\" \"}\r\n          </>\r\n        ) : (\r\n          <span className=\"chatbox-empty-message\">\r\n            Tap on a chat to start conversation...\r\n          </span>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n"]},"metadata":{},"sourceType":"module"}